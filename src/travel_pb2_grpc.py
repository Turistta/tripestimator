# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import travel_pb2 as travel__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in travel_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class TravelEstimatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTravelEstimates = channel.unary_unary(
                '/travel.TravelEstimator/GetTravelEstimates',
                request_serializer=travel__pb2.TravelRequest.SerializeToString,
                response_deserializer=travel__pb2.TravelResponse.FromString,
                _registered_method=True)


class TravelEstimatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTravelEstimates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TravelEstimatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTravelEstimates': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTravelEstimates,
                    request_deserializer=travel__pb2.TravelRequest.FromString,
                    response_serializer=travel__pb2.TravelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'travel.TravelEstimator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('travel.TravelEstimator', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TravelEstimator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTravelEstimates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/travel.TravelEstimator/GetTravelEstimates',
            travel__pb2.TravelRequest.SerializeToString,
            travel__pb2.TravelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class PlaceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ValidatePlace = channel.unary_unary(
                '/travel.PlaceService/ValidatePlace',
                request_serializer=travel__pb2.PlaceRequest.SerializeToString,
                response_deserializer=travel__pb2.PlaceResponse.FromString,
                _registered_method=True)


class PlaceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ValidatePlace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PlaceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ValidatePlace': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidatePlace,
                    request_deserializer=travel__pb2.PlaceRequest.FromString,
                    response_serializer=travel__pb2.PlaceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'travel.PlaceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('travel.PlaceService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PlaceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ValidatePlace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/travel.PlaceService/ValidatePlace',
            travel__pb2.PlaceRequest.SerializeToString,
            travel__pb2.PlaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RouteServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalculateRoute = channel.unary_unary(
                '/travel.RouteService/CalculateRoute',
                request_serializer=travel__pb2.RouteRequest.SerializeToString,
                response_deserializer=travel__pb2.RouteResponse.FromString,
                _registered_method=True)


class RouteServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CalculateRoute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RouteServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CalculateRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateRoute,
                    request_deserializer=travel__pb2.RouteRequest.FromString,
                    response_serializer=travel__pb2.RouteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'travel.RouteService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('travel.RouteService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RouteService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CalculateRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/travel.RouteService/CalculateRoute',
            travel__pb2.RouteRequest.SerializeToString,
            travel__pb2.RouteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TrafficServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTrafficInfo = channel.unary_unary(
                '/travel.TrafficService/GetTrafficInfo',
                request_serializer=travel__pb2.TrafficRequest.SerializeToString,
                response_deserializer=travel__pb2.TrafficResponse.FromString,
                _registered_method=True)


class TrafficServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTrafficInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrafficServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTrafficInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrafficInfo,
                    request_deserializer=travel__pb2.TrafficRequest.FromString,
                    response_serializer=travel__pb2.TrafficResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'travel.TrafficService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('travel.TrafficService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TrafficService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTrafficInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/travel.TrafficService/GetTrafficInfo',
            travel__pb2.TrafficRequest.SerializeToString,
            travel__pb2.TrafficResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CostServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EstimateCost = channel.unary_unary(
                '/travel.CostService/EstimateCost',
                request_serializer=travel__pb2.CostRequest.SerializeToString,
                response_deserializer=travel__pb2.CostResponse.FromString,
                _registered_method=True)


class CostServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EstimateCost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CostServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EstimateCost': grpc.unary_unary_rpc_method_handler(
                    servicer.EstimateCost,
                    request_deserializer=travel__pb2.CostRequest.FromString,
                    response_serializer=travel__pb2.CostResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'travel.CostService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('travel.CostService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CostService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EstimateCost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/travel.CostService/EstimateCost',
            travel__pb2.CostRequest.SerializeToString,
            travel__pb2.CostResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
